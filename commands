#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == elasticsearch:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        echo "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
        exit 1
    fi

    PLUGIN_NAME="elasticsearch"
    CONTAINER_NAME="${PLUGIN_NAME}_${APP}"
    HOST_DIR="$DOKKU_ROOT/$APP/$PLUGIN_NAME"
    ENVVAR_NAME="ELASTICSEARCH_URL"
    VOLUME="$HOST_DIR:/var/lib/elasticsearch"

    IMAGE_NAME="jezdez/elasticsearch"
    IMAGE=$(docker images | grep "$IMAGE_NAME" | awk '{print $3}')
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
    RUNNING_ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
fi

function stop_container {
  docker stop $ID > /dev/null
}

function check_image {
    # Check if Elasticsearch container is installed
    if [[ -z $IMAGE ]]; then
        echo "Elasticsearch image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
}

case "$1" in
  elasticsearch:create)
    check_image
    # Stop existing container with the same persistent Elasticsearch
    if [[ ! -z "$ID" ]]; then
        stop_container
    fi

    # Check if an existing DB volume exists
    if [[ -d $HOST_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        mkdir -p $HOST_DIR
        chown -R dokku:dokku $HOST_DIR
    fi

    # Run Elasticsearch in a new container
    docker run -v $VOLUME --name=$CONTAINER_NAME -d $IMAGE_NAME /usr/local/bin/run

    # Link to a potential existing app
    dokku elasticsearch:link $APP $APP
    echo "-----> Elasticsearch container created: $CONTAINER_NAME"
    sleep 1
    dokku elasticsearch:info $APP
    ;;

  elasticsearch:delete)
    # Stop the container
    if [[ ! -z $ID ]]; then
        stop_container
        docker rm $ID  > /dev/null
    fi
    # Remove persistent volume
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi

    # unlink this container as "elasticsearch"
    dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"
    dokku config:unset "$APP" $ENVVAR_NAME
    echo "-----> Elasticsearch container deleted: $CONTAINER_NAME"
    ;;

  elasticsearch:info)
    IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
    echo
    echo "       Host: ${IP}"
    echo "       Private ports: 9200, 9300"
    echo
    ;;

  elasticsearch:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="${PLUGIN_NAME}_${3}"

        # link this container as "elasticsearch"
        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"

        # figure out IP to set env var
        IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
        dokku config:set "$APP" $ENVVAR_NAME="http://${IP}:9200"
        echo "-----> $APP linked to $CONTAINER_NAME container"
    fi
    ;;

  elasticsearch:logs)
    docker logs $ID | tail -n 100
    ;;

  elasticsearch:start)
    if [[ "$RUNNING_ID" != "" ]]; then
      echo "Elasticsearch container already running with ID: ${RUNNING_ID}"
      exit 1
    fi
    docker start $ID
    ;;

  elasticsearch:stop)
    check_container
    if [[ -z "$RUNNING_ID" ]]; then
      echo "Elasticsearch container is not running"
      exit 1
    fi
    stop_container
    ;;

  help)
    cat && cat<<EOF
    elasticsearch:create <app>                              Create a Elasticsearch container
    elasticsearch:delete <app>                              Delete specified Elasticsearch container
    elasticsearch:info <app>                                Display container informations
    elasticsearch:link <app> <container>                    Link an app to a Elasticsearch container
    elasticsearch:logs <app>                                Display last logs from Elasticsearch container
    elasticsearch:start <app>                               Start Elasticsearch container
    elasticsearch:stop <app>                                Stop Elasticsearch container
EOF
    ;;

esac
